apiVersion: apps/v1
# Use a stateful setup to ensure that for a rolling update Pods are restarted with a rolling strategy one-by-one.
# This prevents losing in-memory information stored redundantly in two Pods.
kind: StatefulSet
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  serviceName: keycloak-discovery
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: "ghcr.io/ajharry69/keycloak:26.3.1"
          args: ["start", "--optimized", "--proxy-headers", "xforwarded"]
          ports:
            - name: keycloak-http
              containerPort: 8080
            - name: keycloak-https
              containerPort: 8443
            - name: keycloak-mgmt
              containerPort: 9000
          env:
            # This helps Keycloak generate correct issuer URLs.
            # For production, this should be your public-facing domain.
            - name: KC_HOSTNAME
              value: "https://oauth.xently.co.ke"
            # This allows Keycloak to be accessed via HTTP, which is common
            # inside a cluster where a separate Ingress handles TLS termination.
            - name: KC_HTTP_ENABLED
              value: "true"
            - name: KC_HTTP_MANAGEMENT_ENABLED
              value: "true"
            - name: KC_CACHE
              value: "ispn"
            # Passing the Pod's IP primary address to the JGroups clustering as this is required in IPv6 only setups
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            # Instruct JGroups which DNS hostname to use to discover other Keycloak nodes
            # Needs to be unique for each Keycloak cluster
            - name: JAVA_OPTS_APPEND
              value: '-Djgroups.dns.query="keycloak-discovery" -Djgroups.bind.address=$(POD_IP)'
            - name: KC_DB_URL
              value: "jdbc:postgresql://keycloak-database.keycloak.svc.cluster.local:5432/authentication"
            - name: KC_DB_USERNAME
              valueFrom: { secretKeyRef: { name: keycloak-credentials, key: DB_USERNAME } }
            - name: KC_DB_PASSWORD
              valueFrom: { secretKeyRef: { name: keycloak-credentials, key: DB_PASSWORD } }
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              valueFrom: { secretKeyRef: { name: keycloak-credentials, key: ADMIN_USERNAME } }
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              valueFrom: { secretKeyRef: { name: keycloak-credentials, key: ADMIN_PASSWORD } }
          volumeMounts:
            - name: keycloak-storage
              mountPath: /opt/keycloak/data
          startupProbe:
            httpGet:
              path: /health/started
              port: 9000
            periodSeconds: 1
            failureThreshold: 600
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 9000
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health/live
              port: 9000
            periodSeconds: 10
            failureThreshold: 3
      volumes:
        - name: keycloak-storage
          persistentVolumeClaim:
            claimName: keycloak-pvc