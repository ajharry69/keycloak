name: Release

on:
  workflow_dispatch:
    inputs:
      confirm_release:
        description: "Type RELEASE to confirm deployment"
        required: true
        default: "deployment"
  push:
    tags:
      - "[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: "read"
  id-token: "write"

env:
  REGISTRY: ghcr.io
  GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

jobs:
  docker:
    runs-on: ubuntu-24.04
    if: github.event_name != 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ env.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  provision:
    needs:
      - docker
    runs-on: ubuntu-24.04
    if: always() && (github.event_name != 'workflow_dispatch' || (github.event.inputs.confirm_release == 'RELEASE' && (needs.docker.result == 'success' || needs.docker.result == 'skipped')))
    defaults:
      run:
        shell: bash
        working-directory: ops/terraform
    env:
      TF_IN_AUTOMATION: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve

  deploy:
    needs:
      - provision
    runs-on: ubuntu-24.04
    if: always() && (github.event_name != 'workflow_dispatch' || (github.event.inputs.confirm_release == 'RELEASE' && (needs.docker.result == 'success' || needs.docker.result == 'skipped')))
    defaults:
      run:
        shell: bash
        working-directory: ops/k8s/overlays/production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GKE access (OIDC + gcloud + kubeconfig + Helm)
        uses: ./.github/actions/gke-setup
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Install NGINX Ingress Controller (Helm)
        env:
          NGINX_CHART_VERSION: 4.11.3
        run: |
          set -euo pipefail
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --version ${NGINX_CHART_VERSION} \
            --set controller.resources.requests.cpu=100m \
            --set controller.resources.requests.memory=128Mi \
            --set controller.resources.limits.cpu=500m \
            --set controller.resources.limits.memory=512Mi
          # Wait for the controller to be ready
          kubectl -n ingress-nginx rollout status deploy/ingress-nginx-controller --timeout=300s
          # Wait for Service external IP
          echo "Waiting for ingress-nginx controller Service external IP..."
          for i in $(seq 1 60); do
            EXTIP=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "${EXTIP}" ]; then echo "Found external address: ${EXTIP}"; break; fi
            echo "No external address yet (attempt $i/60); sleeping 5s..."; sleep 5;
          done
      
      - name: Install cert-manager (Helm)
        env:
          CERT_MANAGER_VERSION: v1.14.5
        run: |
          set -euo pipefail
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version ${CERT_MANAGER_VERSION} \
            --set installCRDs=true \
            --set resources.requests.cpu=50m \
            --set resources.requests.memory=128Mi \
            --set resources.limits.cpu=300m \
            --set resources.limits.memory=512Mi
          # Wait for cert-manager components to be ready
          kubectl -n cert-manager rollout status deploy/cert-manager --timeout=300s
          kubectl -n cert-manager rollout status deploy/cert-manager-webhook --timeout=300s
          kubectl -n cert-manager rollout status deploy/cert-manager-cainjector --timeout=300s
          # Ensure webhook Service has endpoints
          echo "Waiting for cert-manager-webhook Service EndpointSlices..."
          for i in $(seq 1 30); do
            if kubectl -n cert-manager get endpointslice -l kubernetes.io/service-name=cert-manager-webhook -o jsonpath='{range .items[*].endpoints[*]}{.addresses[0]}{" "}{end}' | grep -qE '\\S'; then
              echo "cert-manager-webhook EndpointSlices are ready"; break;
            fi
            echo "No webhook EndpointSlices yet (attempt $i/30); sleeping 5s..."; sleep 5;
          done
      
      - name: Install External Secrets (Helm)
        env:
          ESO_CHART_VERSION: 0.19.2
        run: |
          set -euo pipefail
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update
          # Install CRDs and Operator via Helm (recommended by official docs)
          helm upgrade --install external-secrets external-secrets/external-secrets \
            --namespace external-secrets \
            --create-namespace \
            --version ${ESO_CHART_VERSION} \
            --set installCRDs=true
          # Ensure CRDs are Established and NamesAccepted before applying any ExternalSecret resources
          echo "Waiting for External Secrets CRDs to be Established and NamesAccepted..."
          for crd in externalsecrets.external-secrets.io clustersecretstores.external-secrets.io secretstores.external-secrets.io; do
            kubectl wait --for=condition=Established --timeout=180s crd/$crd || true
            kubectl wait --for=condition=NamesAccepted --timeout=180s crd/$crd || true
          done
          # Give the API server a brief moment to refresh discovery information
          sleep 10
          # Wait for the operator and its webhook/cert-controller deployments to be ready
          kubectl -n external-secrets rollout status deploy/external-secrets --timeout=300s
          kubectl -n external-secrets rollout status deploy/external-secrets-webhook --timeout=300s
          kubectl -n external-secrets rollout status deploy/external-secrets-cert-controller --timeout=300s
          # Ensure the webhook Service has active endpoints before applying manifests
          echo "Waiting for external-secrets-webhook Service endpoints..."
          for i in $(seq 1 30); do
            if kubectl -n external-secrets get endpoints external-secrets-webhook -o jsonpath='{.subsets[*].addresses[*].ip}' | grep -qE '\S'; then
              echo "external-secrets-webhook endpoints are ready"; break;
            fi
            echo "No webhook endpoints yet (attempt $i/30); sleeping 5s..."; sleep 5;
          done
          # Final check: fail fast if endpoints are still missing
          if ! kubectl -n external-secrets get endpoints external-secrets-webhook -o jsonpath='{.subsets[*].addresses[*].ip}' | grep -qE '\S'; then
            echo "ERROR: external-secrets-webhook has no endpoints after waiting." >&2
            kubectl -n external-secrets get deploy,po,svc
            exit 1
          fi

      - name: Deploy production overlay
        run: kubectl apply -k .