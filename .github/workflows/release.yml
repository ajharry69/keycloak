name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: "read"
  id-token: "write"

env:
  REGISTRY: ghcr.io
  GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

jobs:
  docker:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ env.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  provision:
    needs:
      - docker
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
        working-directory: ops/terraform
    env:
      TF_IN_AUTOMATION: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve

  deploy:
    needs:
      - provision
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
        working-directory: ops/k8s/overlays/production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: "keycloak-cluster"
          location: "africa-south1"

      - name: Grant cluster-admin to deploy SA (idempotent)
        run: |
          set -euo pipefail
          kubectl create clusterrolebinding github-actions-cluster-admin \
            --clusterrole=cluster-admin \
            --user=${{ secrets.GCP_SERVICE_ACCOUNT }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.3

      - name: Install External Secrets (Helm)
        env:
          ESO_CHART_VERSION: 0.19.2
        run: |
          set -euo pipefail
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update
          # Install CRDs and Operator via Helm (recommended by official docs)
          helm upgrade --install external-secrets external-secrets/external-secrets \
            --namespace external-secrets \
            --create-namespace \
            --version ${ESO_CHART_VERSION} \
            --set installCRDs=true
          # Wait for the operator to be ready
          kubectl -n external-secrets rollout status deploy/external-secrets --timeout=300s

      - name: Deploy production overlay
        run: kubectl apply -k .