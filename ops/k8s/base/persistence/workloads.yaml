apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak-database
  namespace: keycloak
  labels:
    app: keycloak-database
spec:
  # IMPORTANT: Do NOT scale replicas for this StatefulSet without introducing
  # PostgreSQL replication/failover (e.g., an operator like Patroni/Zalando,
  # CrunchyData, or Bitnami PostgreSQL HA). Simply setting replicas > 1 on the
  # vanilla postgres image will not create a functional cluster.
  serviceName: keycloak-database
  volumeClaimTemplates:
    - metadata:
        name: db-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  selector:
    matchLabels:
      app: keycloak-database
  template:
    metadata:
      labels:
        app: keycloak-database
    spec:
      # Anti-affinity helps spread replicas across nodes if you later migrate to
      # a replicated/HA PostgreSQL image/operator.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: keycloak-database
      containers:
        - name: postgres
          image: postgres:17-alpine
          ports:
            - name: keycloak-svc-db
              containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "authentication"
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: keycloak-credentials, key: DB_USERNAME } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: keycloak-credentials, key: DB_PASSWORD } }
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: db-storage
              mountPath: /var/lib/postgresql/data
          startupProbe:
            exec:
              command: ["sh", "-c", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""]
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 60
          readinessProbe:
            exec:
              command: ["sh", "-c", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""]
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["sh", "-c", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""]
            initialDelaySeconds: 20
            periodSeconds: 10
            failureThreshold: 6
